/*
This is the code to automate the Dell Warranty API. Not code here should need to be altered and not manually executions are needed
There are two automated triggers created to execute the code:
1. Daily Trigger - This runs every day between 5am and 6am and calls function dailyMain()
  This functions purpose is to append dell warranty information to the bottom of the spreadsheet for devices that have no information currently (newly added devices)
2. Weekly Trigger - This runs once a week on a Monday between 1am and 2am and calls function weeklyMain()
  This functions purpose is to overwrite all data and repopulate it. This is done so all warranty is accurate in case extended or new warranty is purchased

NOTE: The Queried Serial column on the right is a helper column. It has pre-queried all Dell devices in the asset register to save computing time.

ISSUES:
Errors in code - The only errors occuring should hopefully be issues on Dells side from testing. If an error is thrown it will just execute the next day so no worry
  If errors become frequent error handling can be easier implemented
Queried Serial Numbers missing Dell Devices - This issue will be with the query itself not the code here. It queries "TCE Supplied Device - BackEnd" Google Sheet.
  It has to filter for only Dell devices, however there are issues where some serial numbers have blank information usually because they have never been turned on for CompInfo to pull 
  the devices information. So tweaking on the query may be needed overtime to include all devices or there needs Glenn needs to fix All Devices sheet (wouldn't be too hard).
*/

// These are the API keys purchased from Dell in order to do the OAuth2 (Authentication) and gain access to their database
const clientId = "xxxxxxxxxxxxx";
const clientSecret = "xxxxxxxxxxxx"; 

const ss = SpreadsheetApp.getActiveSpreadsheet();
const dwws = ss.getSheetByName("Dell Warr API");
const helperColumn = 9; // This is the column on the spreadsheet that has pre-queried all Dell devices in the asset register to save computing time
const lastRow = dwws.getLastRow();


// This function is connected to the daily trigger which means it will run each day
// The purpose of the function is to append dell warranty information to the bottom of the spreadsheet for devices that have no information currently
function dailyMain(){
  // Get Length of A column which will get the length of warranty information we already have
  let aColLast = ss.getRange("A1:A").getValues().filter(String).length;
  let missingDellWarranty = lastRow - aColLast;
   
  // For loop to populate dell warranty for devices that have not been entered yet
  for(let y = 0; y < missingDellWarranty; y++){
    updateRow(aColLast + 1);
    aColLast ++;
  }
}

// This function is connected to the weekly trigger which means it will run once a week
// The purpose of the function is to overwrite all data and repopulate it. This is done so all warranty is accurate in case extended or new warranty is purchased   
function weeklymain(){
  // Clears all contents of Dell Warranty Data
  dwws.getRange(2,1,lastRow,7).clearContent();

  // For loop populates Dell Warranty Information
  for(let y = 2; y < lastRow+1; y++) updateRow(y);
}
  
  
// input warranty information in each row
function updateRow(rowIndex){
  let serviceTag = dwws.getRange(rowIndex,helperColumn).getValue().toString();
  let deviceInformation = getDellWarranty(serviceTag, get0Auth());

  dwws.getRange(rowIndex,1,1,7).setValues(deviceInformation); // populates entire row with warranty information for that service tag
}


// This uses 0Auth, an authentication method which uses bearer tokens to create sessions if successfully from handshake.
// This will allow the program to only have to ask for access the first time of the session.
// It then retrieves the device information based on a device service tag
function get0Auth(){
  let cache = CacheService.getDocumentCache();
  let bearerToken = cache.get("dell_access_token");

  // If the bearer token has not been previously set, request a new one
  if(!bearerToken) {
  
    //auth and get our token thing
    let options = {
      'method' : 'post',
      'payload' : {
        'client_id': clientId,
        'client_secret': clientSecret,
        'grant_type': 'client_credentials'
      }
    };
    let authenticationResponseHttp = UrlFetchApp.fetch("https://apigtwb2c.us.dell.com/auth/oauth/v2/token", options);
    let authenticationResponse = JSON.parse(authenticationResponseHttp);
  
    //store the access token (bearer token) in the cache for the duration that it is valid - a bit
    cache.put("dell_access_token", authenticationResponse.access_token, authenticationResponse.expires_in / 2);
    bearerToken = authenticationResponse.access_token;
  }
  
  // to use bearer token to retrieve warranty through the production endpoint url.
  let getOptions = {
    'method': 'get',
    'headers' : {
      'Authorization': 'Bearer ' + bearerToken,
    }
  };
  
  return getOptions;
}


function getDellWarranty(serviceTag, getOptions){
  // retrieves json data from production endpoint URL
  let jsondata = UrlFetchApp.fetch("https://apigtwb2c.us.dell.com/PROD/sbil/eapi/v5/asset-entitlements?servicetags=" + serviceTag, getOptions);
  let apiResponse = JSON.parse(jsondata);
  let warranties = apiResponse[0].entitlements; // This is each warranty type for the servicetag stored in a list
  
  let warranty = {
    adpWarranty:          '1970-01-01T00:00:00',
    basicWarranty:        '1970-01-01T00:00:00',
    batteryWarranty:      '1970-01-01T00:00:00',
    shipDate:             apiResponse[0].shipDate,
    serviceTag:           apiResponse[0].serviceTag,
    lobCategory:          apiResponse[0].productLobDescription,
    productDescription:   apiResponse[0].productLineDescription
  };


  // Find warranty for basic, ADP, and Battery
  for(let index=0; index < warranties.length; ++index) 
  {
    //Basic
    if( warranties[index].endDate > warranty.basicWarranty && 
      (warranties[index].serviceLevelDescription.indexOf('ProSupport') > -1 || warranties[index].serviceLevelDescription.indexOf('Next Business') >-1))
    warranty.basicWarranty = warranties[index].endDate;

    // ADP (Accidental Damage Protection)
    else if( warranties[index].endDate > warranty.adpWarranty && warranties[index].serviceLevelDescription.indexOf('Accident') > -1)warranty.adpWarranty = warranties[index].endDate;

    // Battery
    else if( warranties[index].endDate > warranty.batteryWarranty && warranties[index].serviceLevelDescription.indexOf('Battery') > -1) warranty.batteryWarranty = warranties[index].endDate;
  }

  // Check if warranty still equals default date. If so, that means there is not any warranty for it
  // NOTE: If message if changed be careful some doesn't get cut off with substrings down the bottom 
  if(warranty.basicWarranty == '1970-01-01T00:00:00') warranty.basicWarranty = 'NIL';
  if(warranty.adpWarranty == '1970-01-01T00:00:00') warranty.adpWarranty = 'NIL';
  if(warranty.batteryWarranty == '1970-01-01T00:00:00') warranty.batteryWarranty = 'NIL';
  
   //essentially error handling incase information is null since we substring it
  if(warranty.shipDate == null) warranty.shipDate = 'NIL';
  if(warranty.lobCategory == null) warranty.lobCategory = 'NIL';
  if(warranty.productDescription == null) warranty.productDescription = 'NIL';

  // create an array to store information needed for the spreadsheet and return it so it can be used elsewhere
  var returnArray = [];
  returnArray.push(
    [
      warranty.serviceTag,
      warranty.productDescription,
      warranty.lobCategory,
      warranty.shipDate.substring(0,10),
      warranty.basicWarranty.substring(0,10),
      warranty.adpWarranty.substring(0,10),
      warranty.batteryWarranty.substring(0,10)
    ]
  );
  return returnArray;
}
